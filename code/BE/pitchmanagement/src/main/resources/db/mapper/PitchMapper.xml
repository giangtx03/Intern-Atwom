<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pitchmanagement.dao.PitchDao">

    <insert id="insertEditPitch" useGeneratedKeys="true" keyProperty="id" parameterType="com.pitchmanagement.model.request.EditPitchRequest">
        INSERT INTO `pitch` (`name`, `address`, `create_at`, `update_at`, `pitch_type_id`)
        VALUES (#{name}, #{address}, #{createAt}, #{updateAt}, #{pitchTypeId});
    </insert>

    <insert id="insertPitch" parameterType="com.pitchmanagement.model.request.PitchRequest">
        INSERT INTO `pitch` (`name`, `address`, `create_at`, `update_at`, `pitch_type_id`)
        VALUES (#{name}, #{address}, #{createAt}, #{updateAt}, #{pitchTypeId});
    </insert>

    <update id="updateEditPitch" parameterType="com.pitchmanagement.model.request.EditPitchRequest">
        UPDATE `pitch`
        SET `name`=#{name}, `address`=#{address}, `update_at`=#{updateAt}, `pitch_type_id`=#{pitchTypeId}
        WHERE `id`=#{id};
    </update>

    <update id="updatePitch" parameterType="com.pitchmanagement.model.request.PitchRequest">
        UPDATE `pitch`
        SET `name`=#{name}, `address`=#{address}, `update_at`=#{updateAt}, `pitch_type_id`=#{pitchTypeId}
        WHERE `id`=#{id};
    </update>

    <delete id="deletePitch" parameterType="int">
        DELETE FROM `pitch`
        WHERE `id`= #{id};
    </delete>

    <select id="selectPitchAll" resultType="com.pitchmanagement.dto.admin.PitchDto">
        SELECT
        p.id, p.name, address, create_at, update_at, pt.name AS `type`,
        COUNT(DISTINCT ptime.pitch_id, ptime.time_slot_id) AS sum_time,
        COUNT(DISTINCT i.id) AS sum_img
        FROM pitch p
        INNER JOIN pitch_type pt ON pt.id = p.pitch_type_id
        LEFT JOIN pitch_time ptime ON p.id = ptime.pitch_id
        LEFT JOIN image i ON p.id = i.pitch_id
        GROUP BY p.id, p.name, address, create_at, update_at, pt.name
    </select>

    <select id="searchPitch" parameterType="map">
        SELECT
            p.id,
            p.name,
            p.address,
            p.create_at AS createAt,
            p.update_at AS updateAt,
            pt.id AS pitchTypeId
        FROM pitch p
        LEFT JOIN pitch_type pt ON pt.id = p.pitch_type_id
    </select>
    <!-- ...................Giang...................................... -->
    <select id="getPitchById" parameterType="Long" resultType="map">
        SELECT
            p.id,
            p.name,
            p.address,
            p.create_at AS createAt,
            p.update_at AS updateAt,
            pt.name AS pitchTypeName,
            AVG(c.star) AS avgStar
        FROM pitch p
        LEFT JOIN pitch_type pt ON pt.id = p.pitch_type_id
        LEFT JOIN comment c ON c.pitch_id = p.id
        WHERE p.id = #{id}
        GROUP BY p.id, p.name, p.address, p.create_at, p.update_at, pt.name
    </select>

    <select id="getAllPitch" parameterType="map" resultType="map">
        SELECT DISTINCT
            p.id,
            p.name,
            p.address,
            p.create_at AS createAt,
            p.update_at AS updateAt,
            pt.name AS pitchTypeName,
            AVG(c.star) AS avgStar
        FROM pitch p
        LEFT JOIN pitch_time pt_time ON p.id = pt_time.pitch_id
        LEFT JOIN pitch_type pt ON pt.id = p.pitch_type_id
        LEFT JOIN comment c ON c.pitch_id = p.id
        WHERE
            (#{pitchTypeId} IS NULL OR #{pitchTypeId} = 0 OR p.pitch_type_id = #{pitchTypeId})
            AND (#{keyword} IS NULL OR CONCAT(IFNULL(p.name, ''), IFNULL(p.address, '')) LIKE CONCAT('%', #{keyword}, '%'))
            AND (#{timeSlotId} IS NULL OR pt_time.time_slot_id = #{timeSlotId} OR #{timeSlotId} = 0 )
        GROUP BY p.id, p.name, p.address, p.create_at, p.update_at, pt.name
    </select>
</mapper>